// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, fromJSON, hasAccess, toJSON, wrapper;

  wrapper = require('mongo_wrapper');

  ObjectID = requre('mongodb').ObjectID;

  fromJSON = function(json) {
    return json;
  };

  toJSON = function(model) {
    var ret;
    ret = model;
    delete ret._id;
    return ret;
  };

  hasAccess = function(userId, teamId) {
    return true;
  };

  module.exports = function(app) {
    app.get('/teams', function(request, response) {
      return response.status(500);
    });
    app.get('/teams/:id', function(request, response) {
      var e, teamId;
      try {
        teamId = request.params.id;
        if (hasAccess(request.session.userId, teamId)) {
          return wrapper(function(db) {
            var team;
            team = db.collection('teams').find({
              _id: ObjectID(teamId)
            })[0];
            return response.send(toJSON(team));
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    app.post('/teams', function(request, response) {
      var e;
      try {
        return wrapper(function(db) {
          var collection, team;
          team = fromJSON(request.body);
          collection = db.collection('teams');
          return collection.insert(team, {
            safe: true
          }, function(err, records) {
            if (!err) {
              return response.send(records[0]._id.$oid);
            } else {
              return response.status(500);
            }
          });
        });
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    app.put('/teams/:id', function(request, response) {
      var e, teamId;
      try {
        teamId = request.params.id;
        if (hasAccess(request.session.userId, teamId)) {
          return wrapper(function(db) {
            var team;
            team = fromJSON(request.body);
            db.collection('teams').update({
              _id: ObjectID(teamId)
            }, team);
            return response.status(200);
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    return app["delete"]('/users/:id', function(request, response) {
      var e, teamId;
      try {
        teamId = request.params.id;
        if (hasAccess(request.session.id, teamId)) {
          return wrapper(function(db) {
            return db.collection('teams').remove({
              _id: ObjectID(teamId)
            });
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
  };

}).call(this);
