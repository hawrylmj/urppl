// Generated by CoffeeScript 1.6.3
(function() {
  var ObjectID, fromJSON, hasAccess, toJSON, wrapper;

  wrapper = require('./mongo_wrapper');

  ObjectID = require('mongodb').ObjectID;

  fromJSON = function(json) {
    return json;
  };

  toJSON = function(model) {
    var ret;
    ret = model;
    delete ret._id;
    return ret;
  };

  hasAccess = function(userId, taskId) {
    var access, users;
    users = [];
    wrapper(function(db) {
      var collection, team, teams, user, _i, _len, _results;
      collection = db.collection('teams');
      teams = collection.find({
        users: userId
      });
      _results = [];
      for (_i = 0, _len = teams.length; _i < _len; _i++) {
        team = teams[_i];
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = team.members;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            user = _ref[_j];
            if (users.indexOf(user) < 0) {
              _results1.push(users.push(user));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    });
    users = users.map(function(id) {
      return ObjectID(id);
    });
    access = false;
    wrapper(function(db) {
      var collection, usersWithAccess;
      collection = db.collection('users');
      usersWithAccess = collection.find({
        _id: {
          $in: users
        },
        tasks: taskId
      });
      if (usersWithAccess.length > 0) {
        return access = true;
      }
    });
    return access;
  };

  module.exports = function(app) {
    app.get('/tasks', function(request, response) {
      return response.status(500);
    });
    app.get('/tasks/:id', function(request, response) {
      var e, id;
      try {
        id = request.params.id;
        if (hasAccess(request.session.userId, id)) {
          return wrapper(function(db) {
            var task;
            task = db.collection('tasks').find({
              _id: ObjectID(id)
            })[0];
            return response.send(toJSON(task));
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    app.post('/tasks', function(request, response) {
      var e;
      try {
        return wrapper(function(db) {
          var collection, task;
          task = fromJSON(request.body);
          collection = db.collection('tasks');
          return collection.insert(task, {
            safe: true
          }, function(err, records) {
            if (!err) {
              return response.send(records[0]._id.$oid);
            } else {
              return response.status(500);
            }
          });
        });
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    app.put('/tasks/:id', function(request, response) {
      var e, task, taskId;
      try {
        taskId = request.params.id;
        if (hasAccess(request.session.id, taskId)) {
          task = fromJSON(request.body);
          return wrapper(function(db) {
            db.collection('tasks').update({
              _id: ObjectID(taskId)
            }, task);
            return response.status(200);
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
    return app["delete"]('/tasks/:id', function(request, response) {
      var e, taskId;
      try {
        taskId = request.params.id;
        if (hasAccess(request.session.id, taskId)) {
          return wrapper(function(db) {
            return db.collection('tasks').remove({
              _id: ObjectID(taskId)
            });
          });
        } else {
          return response.status(403);
        }
      } catch (_error) {
        e = _error;
        return response.status(500);
      }
    });
  };

}).call(this);
